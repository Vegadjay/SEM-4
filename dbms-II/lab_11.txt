// 1. Find employees whose name starts with E
db.employee.find({ ENAME: { $regex: /^E/ } })

// 2. Find employees whose name ends with n
db.employee.find({ ENAME: { $regex: /n$/ } })

// 3. Find employees whose name starts with S or M
db.employee.find({ ENAME: { $regex: /^[SM]/ } })

// 4. Find employees where city starts with A to M
db.employee.find({ CITY: { $regex: /^[A-M]/ } })

// 5. Find employees where city name ends in ‘ney’
db.employee.find({ CITY: { $regex: /ney$/ } })

// 6. Display employee info whose name contains n (both uppercase(N) and lowercase(n))
db.employee.find({ ENAME: { $regex: /n/i } })

// 7. Display employee info whose name starts with E and has 5 characters
db.employee.find({ ENAME: { $regex: /^E.{4}$/ } })

// 8. Display employee whose name starts with S and ends in a
db.employee.find({ ENAME: { $regex: /^S.*a$/ } })

// 9. Display EID, ENAME, CITY and SALARY whose name starts with ‘Phi’
db.employee.find({ ENAME: { $regex: /^Phi/ } }, { EID: 1, ENAME: 1, CITY: 1, SALARY: 1 })

// 10. Display ENAME, JOININGDATE and CITY whose city contains ‘dne’ as three letters in city name
db.employee.find({ CITY: { $regex: /dne/ } }, { ENAME: 1, JOININGDATE: 1, CITY: 1 })

// 11. Display ENAME, JOININGDATE and CITY who does not belong to city London or Sydney
db.employee.find({ CITY: { $nin: ['London', 'Sydney'] } }, { ENAME: 1, JOININGDATE: 1, CITY: 1 })

// 12. Find employees whose names start with 'J'
db.employee.find({ ENAME: { $regex: /^J/ } })

// 13. Find employees whose names end with 'y'
db.employee.find({ ENAME: { $regex: /y$/ } })

// 14. Find employees whose names contain the letter 'a'
db.employee.find({ ENAME: { $regex: /a/ } })

// 15. Find employees whose names contain either 'a' or 'e'
db.employee.find({ ENAME: { $regex: /[ae]/ } })

// 16. Find employees whose names start with 'J' and end with 'n'
db.employee.find({ ENAME: { $regex: /^J.*n$/ } })

// 17. Find employees whose CITY starts with 'New'
db.employee.find({ CITY: { $regex: /^New/ } })

// 18. Find employees whose CITY does not start with 'L'
db.employee.find({ CITY: { $regex: /^L/i  } })

// 19. Find employees whose CITY contains the word 'York'
db.employee.find({ CITY: { $regex: /York/ } })

// 20. Find employees whose names have two consecutive vowels (a, e, i, o, u)
db.employee.find({ ENAME: { $regex: /[aeiou]{2}/i } })

// 21. Find employees whose names have three or more letters
db.employee.find({ ENAME: { $regex: /^.{3,}$/ } })

// 22. Find employees whose names have exactly 4 letters
db.employee.find({ ENAME: { $regex: /^.{4}$/ } })

// 23. Find employees whose names start with either 'S' or 'M'
db.employee.find({ ENAME: { $regex: /^[SM]/ } })

// 24. Find employees whose names contain 'il' anywhere
db.employee.find({ ENAME: { $regex: /il/ } })

// 25. Find employees whose names do not contain 'a'
db.employee.find({ ENAME: { $regex: /a/, $not: true } })

// 26. Find employees whose names contain any digit
db.employee.find({ ENAME: { $regex: /\d/ } })

// 27. Find employees whose names contain exactly one vowel
db.employee.find({ ENAME: { $regex: /^[^aeiou]*[aeiou][^aeiou]*$/i } })

// 28. Find employees whose names start with any uppercase letter followed by any lowercase letter
db.employee.find({ ENAME: { $regex: /^[A-Z][a-z]/ } })









//Part-B








// 1. Display documents where sname starts with "K"
db.Student.find({ SNAME: /^K/ });

// 2. Display documents where sname starts with "Z" or "D"
db.Student.find({ SNAME: { $in: [/^Z/, /^D/] } });

// 3. Display documents where city starts with any letter from A to R
db.Student.find({ CITY: { $regex: '^[A-R]' } });

// 4. Display students' info whose name starts with "P" and ends with "i"
db.Student.find({ SNAME: /^P.*i$/ });

// 5. Display students' info whose department name starts with "C"
db.Student.find({ DEPARTMENT: /^C/ });

// 6. Display name, sem, fees, and department whose city contains "med" as three letters somewhere in city name
db.Student.find({ CITY: /med/ }, { SNAME: 1, SEM: 1, FEES: 1, DEPARTMENT: 1 });

// 7. Display name, sem, fees, and department who does not belong to city Rajkot or Baroda
db.Student.find({ CITY: { $nin: ['Rajkot', 'Baroda'] } }, { SNAME: 1, SEM: 1, FEES: 1, DEPARTMENT: 1 });

// 8. Find students whose names start with 'K' and are followed by any character
db.Student.find({ SNAME: /^K./ });

// 9. Find students whose names end with "a"
db.Student.find({ SNAME: /a$/ });

// 10. Find students whose names contain "ri" (case-insensitive)
db.Student.find({ SNAME: /ri/i });










-Part c-













1. Find students whose names start with a vowel (A, E, I, O, U).
db.students.find({ name: { $regex: /^[AEIOU]/i } })

2. Find students whose CITY ends with 'pur' or 'bad'.
db.students.find({ city: { $regex: /(pur|bad)$/i } })

3. Find students whose FEES starts with '1'.
db.students.find({ fees: { $regex: /^1/ } })

4. Find students whose SNAME starts with 'K' or 'V'.
db.students.find({ sname: { $regex: /^[KV]/i } })


5. Find students whose CITY contains exactly five characters.
6. Find students whose names do not contain the letter 'e'.
7. Find students whose CITY starts with 'Ra' and ends with 'ot'.
8. Find students whose names contain exactly one vowel.
9. Find students whose names start and end with the same letter.
10. Find students whose DEPARTMENT starts with either 'C' or 'E'.
11. Find students whose SNAME has exactly 5 characters.
12. Find students whose GENDER is Female and CITY starts with 'A'














































-























